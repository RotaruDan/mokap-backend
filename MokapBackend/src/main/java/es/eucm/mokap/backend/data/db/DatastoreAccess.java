package es.eucm.mokap.backend.data.db;

import com.google.appengine.api.datastore.*;
import com.google.appengine.api.search.Cursor;
import com.google.appengine.api.search.*;
import com.google.appengine.api.search.Index;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

/**
 * Created by mario on 05/12/2014.
 */
public class DatastoreAccess implements DatabaseInterface {

    private static  DatastoreService ds = DatastoreServiceFactory.getDatastoreService();

    @Override
    public Results<ScoredDocument> searchByString(String searchString) throws IOException {
        return searchByString(searchString,null);
    }
    @Override
    public Results<ScoredDocument> searchByString(String searchString, String cursorString) throws IOException {
        Cursor cursor;
        if(cursorString != null){
            cursor = Cursor.newBuilder().build(cursorString);
        }else{
            cursor = Cursor.newBuilder().build();
        }

        com.google.appengine.api.search.Query query =
                com.google.appengine.api.search.Query.newBuilder().setOptions(
                        QueryOptions.newBuilder().setCursor(cursor).build()).build(searchString);

        IndexSpec indexSpec = IndexSpec.newBuilder().setName("Resource").build();
        Index index = SearchServiceFactory.getSearchService().getIndex(indexSpec);
        // Perform the search
        Results<ScoredDocument> results = index.search(query);
        return results;
    }



    /**
     * Stores an entity in Google Datastore
     * See https://cloud.google.com/appengine/docs/java/javadoc/com/google/appengine/api/datastore/Entity
     * See https://cloud.google.com/appengine/docs/java/javadoc/com/google/appengine/api/datastore/Key
     * @param ent Entity to store
     * @return Key generated by Datastore on insertion
     */
    @Override
    public Key storeEntity(Entity ent) {
        return ds.put(ent);
    }
    /**
     * Deletes an entity from Google Datastore
     * See https://cloud.google.com/appengine/docs/java/javadoc/com/google/appengine/api/datastore/Entity
     * See https://cloud.google.com/appengine/docs/java/javadoc/com/google/appengine/api/datastore/Key
     * @param keyId Id of the key of the entity we want to delete
     */
    @Override
    public void deleteEntity(long keyId) {
        Key k = KeyFactory.createKey("Resource", keyId);
        ds.delete(k);
    }
    /**
     * Returns the entity referenced by the keyId in Datastore converted to a HashMap
     * @param keyId Key Id of the entity we're looking for
     * @return HashMap with all the entity's data
     */
    @Override
    public Map<String, Object> getEntityByIdAsMap(long keyId) {
        Map<String,Object> m = new HashMap<String,Object>();

        Key k = KeyFactory.createKey("Resource", keyId);
        com.google.appengine.api.datastore.Query.Filter keyFilter =
                new com.google.appengine.api.datastore.Query.FilterPredicate(Entity.KEY_RESERVED_PROPERTY,
                        com.google.appengine.api.datastore.Query.FilterOperator.EQUAL,
                        k);
        com.google.appengine.api.datastore.Query q =  new com.google.appengine.api.datastore.Query("Resource").setFilter(keyFilter);
        Entity result = ds.prepare(q).asSingleEntity();
        if(result != null){
            Map<String,Object> props = result.getProperties();
            for(String key : props.keySet())
                m.put(key, props.get(key));
        }
        return m;
    }

    /**
     * Adds an entity to the Datastore search index.
     * @param ent Entity to add
     * @param k Key of the entity we're adding
     */
    public void addToSearchIndex(Entity ent, Key k) {
        //Build a Document Object
        //Add all the attributes on which search can be done
        Document.Builder b = Document.newBuilder();

        Map<String,Object> m = ent.getProperties();

        for(String key : m.keySet()){
            b.addField(Field.newBuilder().setName(key).setText(m.get(key).toString()));
        }
        b.addField(Field.newBuilder().setName("entityRef").setText(k.getId()+""));
        Document newDoc = b.build();
        //Add the Document instance to the Search Index
        IndexSpec indexSpec = IndexSpec.newBuilder().setName("Resource").build();
        Index index = SearchServiceFactory.getSearchService().getIndex(indexSpec);

        index.put(newDoc);
    }
}
